// telegram-auth.js v3.0 - –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–≥—Ä—É–∑–∫–∏

// –ù–ê–°–¢–†–û–ô–ö–ê –í–†–ï–ú–ï–ù–ò –ü–û–ö–ê–ó–ê –≠–ö–†–ê–ù–ê –ó–ê–ì–†–£–ó–ö–ò (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
// –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞ splash screen
const LOADING_SCREEN_DURATION = 3500; // 3.5 —Å–µ–∫—É–Ω–¥—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ—Ç 3000 –¥–æ 4000)
class TelegramAuth {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        this.sessionId = null;
        this.lastActivityTime = Date.now();
        this.activityInterval = null;
        this.isAuthorized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async init() {
        console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        if (!this.tg) {
            console.error('‚ùå Telegram WebApp API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            this.showError('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram');
            return false;
        }

        // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        this.tg.ready();
        this.tg.expand();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const initData = this.tg.initData;
        const initDataUnsafe = this.tg.initDataUnsafe;
        
        console.log('üì± Telegram WebApp –≥–æ—Ç–æ–≤');
        console.log('üë§ InitDataUnsafe:', initDataUnsafe);

        if (initDataUnsafe.user) {
            this.user = {
                id: initDataUnsafe.user.id,
                username: initDataUnsafe.user.username || `user_${initDataUnsafe.user.id}`,
                first_name: initDataUnsafe.user.first_name || '',
                last_name: initDataUnsafe.user.last_name || '',
                language_code: initDataUnsafe.user.language_code || 'en',
                is_premium: initDataUnsafe.user.is_premium || false
            };

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', this.user);

            // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const authResult = await this.authorizeOnServer();
            
            if (authResult) {
                this.isAuthorized = true;
                this.startActivityTracking();
                this.updateUI();
                return true;
            }
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        return false;
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async authorizeOnServer() {
        try {
            const response = await fetch('auth/telegram_auth.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'login',
                    user: this.user,
                    init_data: this.tg.initData // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('üîë –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result);

            if (result.success) {
                this.sessionId = result.session_id;
                this.showSuccess('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                return true;
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.showError(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            return false;
        }
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    startActivityTracking() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.activityInterval = setInterval(() => {
            this.updateActivity();
        }, 30000);

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        ['click', 'touchstart', 'scroll', 'keypress'].forEach(event => {
            document.addEventListener(event, () => {
                this.lastActivityTime = Date.now();
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        window.addEventListener('beforeunload', () => {
            this.logout();
        });

        // –î–ª—è Telegram Web App
        if (this.tg) {
            this.tg.onEvent('viewportChanged', () => {
                this.lastActivityTime = Date.now();
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            this.tg.BackButton.onClick(() => {
                this.logout();
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async updateActivity() {
        if (!this.sessionId) return;

        try {
            const response = await fetch('auth/update_activity.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: this.user.id,
                    session_id: this.sessionId,
                    last_activity: new Date().toISOString()
                })
            });

            const result = await response.json();
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    // –í—ã—Ö–æ–¥/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async logout() {
        if (!this.sessionId) return;

        try {
            const response = await fetch('auth/telegram_auth.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'logout',
                    user_id: this.user.id,
                    session_id: this.sessionId
                })
            });

            const result = await response.json();
            console.log('üëã –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }

        if (this.activityInterval) {
            clearInterval(this.activityInterval);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    async getUserData() {
        if (!this.user) return null;

        try {
            const response = await fetch(`auth/get_user_data.php?cachebuster=${Date.now()}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache',
                },
                body: JSON.stringify({
                    user_id: this.user.id
                })
            });

            const result = await response.json();
            if (result.success) {
                console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return result.user_data;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }

        return null;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    async toggleFavorite(videoId) {
        if (!this.user) return false;

        try {
            const response = await fetch('auth/update_user_data.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: this.user.id,
                    action: 'toggle_favorite',
                    video_id: videoId
                })
            });

            const result = await response.json();
            return result.success;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
            return false;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)
    async updateReaction(action, videoId) {
        if (!this.user) return false;

        try {
            const response = await fetch('auth/update_user_data.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: this.user.id,
                    action: action,
                    video_id: videoId
                })
            });

            const result = await response.json();
            if (result.success) {
                console.log('‚úÖ –†–µ–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', action, videoId);
            }
            return result.success;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
            return false;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    updateUI() {
        const loadingIndicator = document.getElementById('loadingIndicator');
        const videoContainer = document.getElementById('videoContainer');

        if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }

        if (videoContainer) {
            videoContainer.style.display = 'block';
        }
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    showError(message) {
        const loadingText = document.getElementById('loadingText');
        if (loadingText) {
            loadingText.textContent = `‚ùå ${message}`;
            loadingText.style.color = '#f44336';
        }
    }

    showSuccess(message) {
        const loadingText = document.getElementById('loadingText');
        if (loadingText) {
            loadingText.textContent = `‚úÖ ${message}`;
            loadingText.style.color = '#4CAF50';
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    isUserAuthorized() {
        return this.isAuthorized && this.user !== null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserId() {
        return this.user?.id || null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUsername() {
        return this.user?.username || null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.telegramAuth = new TelegramAuth();